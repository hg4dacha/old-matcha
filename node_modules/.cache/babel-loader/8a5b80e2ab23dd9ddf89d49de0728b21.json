{"ast":null,"code":"import _slicedToArray from \"/home/gadacha/Bureau/matcha/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\n\nvar Geolocation = function Geolocation() {\n  _s();\n\n  var _useState = useState({\n    loaded: false,\n    coordinates: {\n      lat: '',\n      lng: ''\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var onSuccess = function onSuccess(location) {\n    setLocation({\n      loaded: true,\n      coordinates: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }\n    });\n  };\n\n  var onError = function onError(error) {\n    setLocation({\n      loaded: true,\n      error: error\n    });\n  };\n\n  useEffect(function () {\n    if (!(\"geolocation\" in navigator)) {\n      onError({\n        code: 0,\n        msg: 'géolocalisation non prise en charge'\n      });\n    }\n\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\n  });\n  return location;\n};\n\n_s(Geolocation, \"Qal4QTV0EnusOeWHeYVaCkfa28w=\");\n\n_c = Geolocation;\nexport default Geolocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Geolocation\");","map":{"version":3,"sources":["/home/gadacha/Bureau/matcha/src/components/Profile/Geolocation.js"],"names":["React","useState","useEffect","Geolocation","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","navigator","code","msg","geolocation","getCurrentPosition"],"mappings":";;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA,kBAEUF,QAAQ,CAAE;AACtCG,IAAAA,MAAM,EAAE,KAD8B;AAEtCC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,GAAG,EAAE;AAAhB;AAFyB,GAAF,CAFlB;AAAA;AAAA,MAEfC,QAFe;AAAA,MAELC,WAFK;;AAQtB,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAF,QAAQ,EAAI;AAC1BC,IAAAA,WAAW,CAAC;AACRL,MAAAA,MAAM,EAAE,IADA;AAERC,MAAAA,WAAW,EAAE;AAAEC,QAAAA,GAAG,EAAEE,QAAQ,CAACG,MAAT,CAAgBC,QAAvB;AAAiCL,QAAAA,GAAG,EAAEC,QAAQ,CAACG,MAAT,CAAgBE;AAAtD;AAFL,KAAD,CAAX;AAIH,GALD;;AAQA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACrBN,IAAAA,WAAW,CAAC;AACRL,MAAAA,MAAM,EAAE,IADA;AAERW,MAAAA,KAAK,EAALA;AAFQ,KAAD,CAAX;AAIH,GALD;;AAOAb,EAAAA,SAAS,CAAE,YAAM;AAEb,QAAK,EAAE,iBAAiBc,SAAnB,CAAL,EAAqC;AACjCF,MAAAA,OAAO,CAAC;AACJG,QAAAA,IAAI,EAAE,CADF;AAEJC,QAAAA,GAAG,EAAE;AAFD,OAAD,CAAP;AAIH;;AAEDF,IAAAA,SAAS,CAACG,WAAV,CAAsBC,kBAAtB,CAAyCV,SAAzC,EAAoDI,OAApD;AAEH,GAXQ,CAAT;AAaA,SAAON,QAAP;AACH,CArCD;;GAAML,W;;KAAAA,W;AAuCN,eAAeA,WAAf","sourcesContent":["import { React, useState, useEffect } from 'react';\n\n\n\n\n\nconst Geolocation = () => {\n\n    const [location, setLocation] = useState( {\n        loaded: false,\n        coordinates: { lat: '', lng: '' }\n    } );\n\n    \n    const onSuccess = location => {\n        setLocation({\n            loaded: true,\n            coordinates: { lat: location.coords.latitude, lng: location.coords.longitude }\n        })\n    }\n\n\n    const onError = error => {\n        setLocation({\n            loaded: true,\n            error\n        })\n    }\n\n    useEffect( () => {\n\n        if ( !(\"geolocation\" in navigator) ) {\n            onError({\n                code: 0,\n                msg: 'géolocalisation non prise en charge'\n            });\n        }\n\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\n\n    })\n\n    return location;\n}\n\nexport default Geolocation;"]},"metadata":{},"sourceType":"module"}